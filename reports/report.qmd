---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/sacosta4/cmsc408-sp2025-hw8-sacosta4.git>


# Problem Background

```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select
  country_code, short_name, region
from 
  world_bank_data.wdi_country
where
  region is null
order by
  short_name
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists wdi_country;
""")
```

```{python}
# create table
execute_ddl(cnx,"""
create table wdi_country as
select *
from world_bank_data.wdi_country
where region is not null;
""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
select count(*) as "Country Count"
from wdi_country
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select count(*) as "Number of Countries in 2020"
from wdi_country
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
select distinct region
from wdi_country
order by region
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select region, count(*) as "Number of Countries"
from wdi_country
group by region
order by count(*) desc
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select short_name, country_full_name, region
from wdi_country
where lower(region) = 'north america'
order by short_name
""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select region, short_name, country_full_name
from wdi_country
where short_name = 'Qatar'
""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select 
  country_code, short_name, country_abbr, country_wb_abbr, region
from 
  wdi_country
where 
  country_abbr != country_wb_abbr
order by 
  region, short_name
""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select 
  income_group, count(*) as "Number of Countries"
from 
  wdi_country
group by 
  income_group
order by 
  count(*) desc
""")

```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
select 
  short_name, region, income_group
from 
  wdi_country
where 
  income_group is null
order by 
  short_name
""")

```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
update wdi_country
set income_group = 'High income'
where short_name = 'Kuwait'
""")


```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx,"""
select 
  short_name, region, income_group
from 
  wdi_country
where 
  short_name = 'Kuwait'
""")

```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select 
  region, income_group, count(*) as "Number of Countries"
from 
  wdi_country
group by 
  region, income_group
order by 
  region, income_group
""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
select 
  region,
  sum(case when income_group = 'High income' then 1 else 0 end) as "High income",
  sum(case when income_group = 'Upper middle income' then 1 else 0 end) as "Upper middle income",
  sum(case when income_group = 'Lower middle income' then 1 else 0 end) as "Lower middle income",
  sum(case when income_group = 'Low income' then 1 else 0 end) as "Low income",
  sum(case when income_group is null then 1 else 0 end) as "No Category",
  count(*) as "Row Total"
from 
  wdi_country
group by 
  region
order by 
  region
""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
select 
  count(*) as "Low Income Count",
  region, 
  income_group
from 
  wdi_country
where 
  income_group = 'Low income'
group by 
  region, income_group
order by 
  count(*) desc
limit 1
""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
select 
  country_code, short_name, region, income_group
from 
  wdi_country
where 
  region = (select region from wdi_country where country_code = 'MHL')
  and income_group = (select income_group from wdi_country where country_code = 'MHL')
order by 
  short_name
""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
with regions_cte as (
  select distinct region from wdi_country where region is not null
),
income_cte as (
  select distinct income_group from wdi_country where income_group is not null
  union select null as income_group
),
all_combinations_cte as (
  select 
    r.region, i.income_group
  from 
    regions_cte r
    cross join income_cte i
),
existing_combinations_cte as (
  select 
    region, income_group, count(*) as count
  from 
    wdi_country
  group by 
    region, income_group
)
select 
  ac.region, 
  ac.income_group
from 
  all_combinations_cte ac
  left join existing_combinations_cte ec on ac.region = ec.region and 
    (ac.income_group is null and ec.income_group is null or ac.income_group = ec.income_group)
where 
  ec.count is null
order by 
  ac.region, ac.income_group
""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
with region_income_counts as (
  select 
    region, 
    income_group, 
    count(*) as count
  from 
    wdi_country
  group by 
    region, income_group
),
region_totals as (
  select 
    region, 
    sum(count) as total
  from 
    region_income_counts
  group by 
    region
),
income_totals as (
  select 
    income_group, 
    sum(count) as total
  from 
    region_income_counts
  group by 
    income_group
),
grand_total as (
  select 
    sum(count) as total
  from 
    region_income_counts
)
select 
  ric.region,
  ric.income_group,
  ric.count as "Country Count",
  rt.total as "Region Total",
  it.total as "Income Group Total",
  (select total from grand_total) as "Grand Total",
  round(ric.count / (select total from grand_total) * 100, 2) as "Percent of Total"
from 
  region_income_counts ric
  join region_totals rt on ric.region = rt.region
  join income_totals it on ric.income_group = it.income_group
order by 
  ric.region, ric.income_group
""")


```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
with region_income_counts as (
  select 
    region, 
    income_group, 
    count(*) as count
  from 
    wdi_country
  group by 
    region, income_group
),
grand_total as (
  select 
    sum(count) as total
  from 
    region_income_counts
)
select 
  region,
  round(sum(case when income_group = 'High income' then count else 0 end) / (select total from grand_total) * 100, 2) as "High income %",
  round(sum(case when income_group = 'Upper middle income' then count else 0 end) / (select total from grand_total) * 100, 2) as "Upper middle income %",
  round(sum(case when income_group = 'Lower middle income' then count else 0 end) / (select total from grand_total) * 100, 2) as "Lower middle income %",
  round(sum(case when income_group = 'Low income' then count else 0 end) / (select total from grand_total) * 100, 2) as "Low income %",
  round(sum(case when income_group is null then count else 0 end) / (select total from grand_total) * 100, 2) as "No Category %",
  round(sum(count) / (select total from grand_total) * 100, 2) as "Region % of Total"
from 
  region_income_counts
group by 
  region
order by 
  region
""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
with income_counts as (
  select 
    income_group, 
    count(*) as count
  from 
    wdi_country
  group by 
    income_group
),
grand_total as (
  select 
    count(*) as total
  from 
    wdi_country
)
select 
  ic.income_group,
  ic.count as "Number of Countries",
  (select total from grand_total) as "Total Countries",
  round(ic.count / (select total from grand_total) * 100, 2) as "Percent of Total"
from 
  income_counts ic
order by 
  ic.count desc
""")

```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

I feel most confident in basic SQL skills like SELECT, WHERE, and ORDER BY clauses. These fundamentals were straightforward to apply in the earlier tasks. I also became more comfortable with aggregation functions (COUNT, SUM) and GROUP BY statements as I worked through the exercises.
The skills that need more practice are definitely the complex queries involving subqueries, CTEs, and CASE statements. Tasks 18-20 were particularly challenging as they required combining multiple techniques. This assignment helped reinforce my understanding of how to organize and manipulate data effectively using SQL, especially when creating summary tables and pivot-style reports.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

For the complex tasks, I approached them by breaking them down into smaller components. For Task 18, I first identified what information I needed (all possible region-income combinations and actual combinations), then created separate CTEs for each before combining them. When I encountered challenges with null values in comparisons, I had to add specific conditions to handle them correctly.
In the future, I would sketch out the data flow more carefully before writing queries for complex problems. I'd also create more test queries to verify intermediate results before combining everything into the final query.


3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

The biggest takeaway from this assignment is how powerful SQL can be for data analysis beyond just data retrieval. I hadn't previously appreciated how techniques like CTEs and CASE statements could be used to create sophisticated reports directly in the database layer.
In real-world scenarios, these skills would be valuable for creating business intelligence dashboards and reports without having to export data to external tools. I can see how data analysts use these techniques to quickly answer business questions and identify patterns in large datasets, which would be applicable in future data analytics courses and professional roles.


# README

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

